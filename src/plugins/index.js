// @ts-check

const loginPlugin = require('./login')
const securityPlugin = require('./security')
const stripePlugin = require('./stripe')

/**
 * @typedef {Object} LocalParam
 * @property {string} authId Indicates the id of the user this request is being executed as. Use database.privateKey for admin rights.
 * @property {boolean} readOnly Indicates if this request is not supposed to make any change on the database. This will skip unnessessary treatments.
 **/

/** @typedef {Object.<string, any> & LocalParam} Local An object being shared through the request **/

/**
 * @typedef {Object} OnEventParam
 * @property {import('../utils').Request} request The current request in the tables
 * @property {import('../utils').Request=} parent The request that generated this request if any
 * @property {Local} local The current request local variables (like authId). You can read them or edit them directly through this object.
 * @property {import('../utils').QueryFunction} query A function that you can use to make a SimpleQL query to the database.
 * @property {boolean} isAdmin A boolean indicating if the current request is being executed as an administrator.
 */

/**
 * @typedef {Object} OnEventTableParam
 * @property {(callback: (results: import('../utils').Result) => void) => void} onSuccess Provide this function a callback that will be called if the request succeeds
 * @property {(callback: () => void) => void} onError Provide this function a callback that will be called if the request fails
 */

/**
 * A function that will make sure that the plugin is correctly configured.
 * @callback Prerequisite
 * @param {import('../utils').FormattedTablesDeclaration} tables The object containing the declaration of the tables
 * @returns {Promise<void>} A promise that will resolve when the tables got checked
 */

/**
 * @typedef {Object} UpdateResults
 * @property {import('../utils').Element[]} objects The objects being edited
 * @property {import('../utils').Element} newValues The new values affected to the objects
 * @property {Object.<string, import('../utils').Element>} oldValues An object mapping the id of each object being edited to their old values
**/

/**
 * @typedef {Object} ListUpdateResults
 * @property {import('../utils').Element[]} objects The objects being edited
 * @property {Object.<string, import('../utils').Element[]>} added An object containing the list of objects being added to each field
 * @property {Object.<string, import('../utils').Element[]>} removed An object containing the list of objects being removed to each field
**/

/** @typedef {Object.<string, (request: import('../utils').Request, onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onRequest **/
/** @typedef {Object.<string, (createdObject: import('../utils').Element, onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onCreation **/
/** @typedef {Object.<string, (deletedObjectsArray: import('../utils').Element[], onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onDeletion **/
/** @typedef {Object.<string, (results: import('../utils').Element[], onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onProcessing **/
/** @typedef {Object.<string, (results: import('../utils').Element[], onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onResult **/
/** @typedef {Object.<string, (results: { [table: string]: import('../utils').Element[] }, onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onResponse **/
/** @typedef {(results: import('../utils').Result, onEvent: OnEventParam) => Promise<void>} onSuccess **/
/** @typedef {(error: import('../errors').Error, onEvent: OnEventParam) => Promise<void>} onError **/
/** @typedef {Object.<string, (results: UpdateResults, onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onUpdate **/
/** @typedef {Object.<string, (results: ListUpdateResults, onEvent: OnEventParam & OnEventTableParam) => Promise<void>>} onListUpdate **/

/**
 * @typedef {Object} Plugin
 * @property {Prerequisite=} preRequisite A function that will make sure that the plugin is correctly configurated.
 * @property {import('express').RequestHandler=} middleware A middleware that might intercept the whole request.
 * @property {import('express').ErrorRequestHandler=} errorHandler A middleware able to handle errors generated by this plugin before being sent to the user
 * @property {onRequest=} onRequest An object containing functions being called before any request in a specific table.
 * @property {onCreation=} onCreation An object containing functions being called each time an element is created into a specific table.
 * @property {onDeletion=} onDeletion An object containing functions being called each time an element is deleted from a specific table.
 * @property {onProcessing=} onProcessing An object containing functions being called after the execution of every depending request, but before any changes have been applied to the current results.
 * @property {onResult=} onResult An object containing functions being called after a request was resolved in a specific table.
 * @property {onSuccess=} onSuccess A function being called after the whole request was resolved, just before commiting the changes in the database and returning the results to the client.
 * @property {onError=} onError A function being called when a request failed to resolve in the database and is about to be rolled back.
 * @property {onUpdate=} onUpdate An object containing functions being called after data have been changed in a specific table.
 * @property {onListUpdate=} onListUpdate An object containing functions being called after some objects have been linked or unlinked to existing objects of the specified teblaes.
 */

/**
 * @type { { loginPlugin: import('./login'), securityPlugin: import('./security'), stripePlugin: import('./stripe') } }
 */
module.exports = {
  loginPlugin,
  securityPlugin,
  stripePlugin
}
